@using ChatApp.Web.ViewModels
@using System.Security.Claims
@using System.Text.Json;
@model ChatViewModel
@{
    ViewData["Title"] = "Smart School Chat";
    Layout = null;
    var currentUsername = User.FindFirstValue(ClaimTypes.NameIdentifier);
}

<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    
    <!-- Scripts -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="module" src="https://cdn.jsdelivr.net/npm/emoji-picker-element@1.21.3/index.js"></script>
    
    <!-- Fonts and Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700;800&display=swap" rel="stylesheet">

    <!-- Custom Styles -->
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }

        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .animate-fade-in {
            animation: fadeIn 0.8s ease-out forwards;
        }

        /* Custom scrollbar for a cleaner look */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(0, 0, 0, 0.3);
        }

        /* Style for the emoji picker to match the new theme */
        emoji-picker {
            --background: rgba(255, 255, 255, 0.9);
            --border-color: #e5e7eb;
            --text-color: #1f2937;
            --secondary-text-color: #6b7280;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center p-4 relative overflow-hidden font-sans">

    <!-- Decorative Background Blobs -->
    <div class="absolute top-0 -left-4 w-72 h-72 bg-blue-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-pulse"></div>
    <div class="absolute top-0 -right-4 w-72 h-72 bg-purple-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-pulse animation-delay-2000"></div>
    <div class="absolute bottom-0 -left-20 w-72 h-72 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-pulse animation-delay-4000"></div>

    <!-- Main Chat Container -->
    <div class="w-full h-[95vh] max-w-6xl bg-white/70 backdrop-blur-xl rounded-2xl shadow-2xl z-10 flex animate-fade-in">

        <!-- Left Panel: Room List -->
        <div class="w-1/3 border-r border-gray-200/80 flex flex-col">
            <div class="p-4 border-b border-gray-200/80 flex items-center space-x-3">
                <svg class="w-8 h-8 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" /></svg>
                <h2 class="text-xl font-bold text-gray-800">Chat Rooms</h2>
            </div>

            <div class="p-4 border-b border-gray-200/80">
                <select id="type-filter" class="w-full bg-white/80 border border-gray-300 text-gray-700 rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                    @foreach (var filterType in Model.FilterTypes)
                    {
                        <option value="@filterType.Value">@filterType.Text</option>
                    }
                </select>
            </div>

            <div id="room-list-container" class="flex-1 overflow-y-auto">
                <ul id="room-list-ul" class="divide-y divide-gray-200/80">
                    @foreach (var room in Model.Rooms)
                    {
                        var isActive = room.ChatRoomId == Model.ActiveRoom?.ChatRoomId;
                        <li class="room-item" data-room-id="@room.ChatRoomId" data-room-type="@room.ChatRoomType.ToString()">
                            <a href="@Url.Action("Index", "Chat", new { roomId = room.ChatRoomId })"
                               class="block p-4 transition duration-200 @(isActive ? "bg-blue-100/80 border-l-4 border-blue-500" : "hover:bg-gray-100/80")">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center min-w-0">
                                        <div class="flex-shrink-0 h-10 w-10 rounded-full bg-gradient-to-br from-blue-400 to-indigo-500 flex items-center justify-center">
                                            <span class="text-lg font-bold text-white">@room.EnglishChatRoomName.Substring(0, 1)</span>
                                        </div>
                                        <div class="ml-3 min-w-0">
                                            <p class="text-sm font-semibold @(isActive ? "text-blue-700" : "text-gray-800") truncate">@room.EnglishChatRoomName</p>
                                            <p class="text-xs text-gray-500 last-message-preview truncate">
                                                @(room.LastMessage != null ? room.LastMessage.Content : "No messages yet")
                                            </p>
                                        </div>
                                    </div>
                                    <span class="unread-count-badge hidden ml-2 px-2 py-0.5 bg-red-500 text-white text-xs font-bold rounded-full">0</span>
                                </div>
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <!-- Right Panel: Chat Window -->
        <div class="w-2/3 flex flex-col bg-transparent">
            @if (Model.ActiveRoom != null)
            {
                @await Html.PartialAsync("_ChatWindowPartial", Model)
            }
            else
            {
                <div class="flex-1 flex items-center justify-center text-center text-gray-500">
                    <div>
                        <i class="fas fa-comments text-6xl text-gray-300 mb-4"></i>
                        <h3 class="mt-2 text-lg font-medium text-gray-600">Select a Chat Room</h3>
                        <p class="mt-1 text-sm text-gray-500">Choose from a room on the left to start a conversation.</p>
                         <form asp-controller="Account" asp-action="Logout" method="post" class="mt-6">
                            <button type="submit" class="w-full max-w-xs mx-auto bg-red-500 text-white font-bold py-2 px-4 rounded-xl hover:bg-red-600 focus:outline-none focus:shadow-outline transition-all duration-300 shadow-lg hover:shadow-red-200 transform hover:scale-105">
                                Logout
                            </button>
                        </form>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Edit Message Modal -->
    <div id="edit-modal" class="hidden fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
        <div class="bg-white/90 backdrop-blur-lg rounded-lg p-6 w-1/3 border border-gray-200 shadow-xl">
            <h3 class="text-lg font-bold text-gray-800 mb-4">Edit Message</h3>
            <textarea id="edit-message-input" class="w-full p-2 bg-white/80 border border-gray-300 rounded-lg text-gray-700 focus:ring-2 focus:ring-blue-500"></textarea>
            <div class="mt-4 flex justify-end space-x-2">
                <button id="cancel-edit-btn" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-lg transition">Cancel</button>
                <button id="save-edit-btn" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition">Save</button>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.5/signalr.min.js"></script>
    <script>
        // All JavaScript logic from original file is preserved here.
        $(document).ready(function () {
            // --- Constants and Variables ---
            const activeRoomId = document.getElementById('room-id-input')?.value;
            const currentUsername = @Json.Serialize(currentUsername);
            const isRoomAdmin = @Json.Serialize(Model.IsCurrentUserRoomAdmin);
            let typingTimer;
            let editMessageId = null;

            // jQuery selectors
            const $roomListUl = $('#room-list-ul');
            const $messageList = $('#message-list');
            const $messageContainer = $('#message-container');
            const $messageInput = $('#message-input');
            const $sendMessageForm = $('#send-message-form');
            const $sendButton = $sendMessageForm.find('button[type="submit"]');
            const $typingIndicator = $('#typing-indicator');
            const $editModal = $('#edit-modal');
            const $editMessageInput = $('#edit-message-input');
            const $emojiButton = $('#emoji-button');
            const $emojiPicker = $('emoji-picker');

            if (!currentUsername || !activeRoomId) return;

            const connection = new signalR.HubConnectionBuilder().withUrl("/hubs/chat").build();

            // --- Core Message Rendering Function ---
            function renderMessage(msg, prepend = false) {
                if (!$messageList.length) return;

                const isCurrentUser = msg.fromUsername === currentUsername;
                const alignmentClass = isCurrentUser ? "justify-end" : "justify-start";
                const bubbleClass = isCurrentUser ? "bg-gradient-to-r from-blue-500 to-indigo-600 text-white" : "bg-gray-200/80 text-gray-800";
                const nameDisplay = isCurrentUser ? "You" : (msg.fromName || "Unknown");
                const roleDisplay = isCurrentUser ? "" : `(${msg.fromUserType})`;
                const time = new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                let messageContentHtml = '';
                switch (msg.messageType) {
                    case 'Image':
                        messageContentHtml = `<img src="${msg.attachmentUrl}" alt="User image" class="max-w-xs rounded-lg" />`;
                        break;
                    case 'File':
                        messageContentHtml = `<a href="${msg.attachmentUrl}" target="_blank" class="flex items-center p-2 bg-gray-500/50 rounded-lg hover:bg-gray-500/70 text-gray-800">
                                                <i class="fas fa-file-alt mr-2"></i>
                                                <span>${msg.attachmentFileName}</span>
                                              </a>`;
                        break;
                    default: // Text
                        const sanitizedContent = $('<div/>').text(msg.content).html().replace(/\n/g, '<br />');
                        messageContentHtml = `<p>${sanitizedContent}</p>`;
                        break;
                }

                let actionsHtml = '';
                 if (isCurrentUser && msg.messageType === 'Text') {
                    actionsHtml += `<button class="edit-btn p-1 bg-white/50 hover:bg-blue-500 rounded-full text-gray-700 hover:text-white text-xs transition" title="Edit Message"><i class="fas fa-pencil-alt w-3 h-3"></i></button>`;
                }
                if (isCurrentUser || isRoomAdmin) {
                    actionsHtml += `<button class="delete-btn p-1 bg-white/50 hover:bg-red-500 rounded-full text-gray-700 hover:text-white text-xs transition" title="Delete Message"><i class="fas fa-trash-alt w-3 h-3"></i></button>`;
                }

                const messageElement = $(`
                    <div class="flex ${alignmentClass} message-item group" data-message-id="${msg.messageId}" data-timestamp-ticks="${new Date(msg.timestamp).getTime()}">
                        <div class="max-w-md inline-block">
                            <div class="text-xs text-gray-500 mb-1 ${isCurrentUser ? 'text-right' : 'text-left'}">
                                <strong>${nameDisplay}</strong>
                                <span class="text-gray-400">${roleDisplay}</span> - ${time}
                            </div>
                            <div class="relative rounded-lg px-4 py-2 shadow-sm ${bubbleClass}">
                                <div class="message-content break-words">${messageContentHtml}</div>
                                <div class="absolute top-0 right-0 mt-1 mr-1 opacity-0 group-hover:opacity-100 flex space-x-1 transition">${actionsHtml}</div>
                            </div>
                        </div>
                    </div>`);

                if (prepend) {
                    $messageList.prepend(messageElement);
                } else {
                    $messageList.append(messageElement);
                    $messageContainer.scrollTop($messageContainer[0].scrollHeight);
                }
            }

            // --- SignalR Hub Event Listeners ---
            connection.on("ReceiveMessage", (message) => {
                const roomItem = $(`.room-item[data-room-id='${message.roomId}']`);
                if (roomItem.length) {
                    let preview = message.messageType === 'Text' ? message.content : `Sent an ${message.messageType.toLowerCase()}`;
                    roomItem.find('.last-message-preview').text(preview);
                    roomItem.prependTo($roomListUl);
                    if (message.roomId.toString() !== activeRoomId) {
                        const badge = roomItem.find('.unread-count-badge');
                        let currentCount = parseInt(badge.text()) || 0;
                        badge.text(currentCount + 1).removeClass('hidden');
                    }
                }
                if (message.roomId.toString() === activeRoomId) {
                    renderMessage(message);
                }
            });

            connection.on("MessageDeleted", (messageId) => {
                $(`.message-item[data-message-id='${messageId}']`).fadeOut(300, function() { $(this).remove(); });
            });

            connection.on("MessageEdited", (messageId, newContent) => {
                const sanitizedContent = $('<div/>').text(newContent).html().replace(/\n/g, '<br />');
                $(`.message-item[data-message-id='${messageId}'] .message-content p`).html(sanitizedContent);
            });

            connection.on("UserTyping", (username, roomId) => {
                if (roomId.toString() === activeRoomId) {
                    $typingIndicator.text(`${username} is typing...`);
                }
            });

            connection.on("UserStoppedTyping", (username, roomId) => {
                if (roomId.toString() === activeRoomId && $typingIndicator.text().includes(username)) {
                    $typingIndicator.text('');
                }
            });

            // --- UI Event Listeners ---
            function setupUI() {
                if (!$sendMessageForm.length) return;

                // Auto-resize textarea
                $messageInput.on('input', function () {
                    this.style.height = 'auto';
                    this.style.height = (this.scrollHeight) + 'px';
                });

                // Send Message on form submit
                $sendMessageForm.on('submit', async (e) => {
                    e.preventDefault();
                    const message = $messageInput.val();
                    if (message.trim() === '') return;

                    try {
                        await connection.invoke("SendMessage", parseInt(activeRoomId), message);
                        await connection.invoke("UserStoppedTyping", parseInt(activeRoomId));
                    } catch (err) { console.error(err); }

                    $messageInput.val('').css('height', 'auto');
                    $sendButton.prop('disabled', true);
                    $emojiPicker.addClass('hidden');
                });

                // Send message on Enter key, new line on Shift+Enter
                $messageInput.on('keydown', function(e) {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        $sendMessageForm.submit();
                    }
                });


                // Typing Indicator logic
                $messageInput.on('input', () => {
                    $sendButton.prop('disabled', $messageInput.val().trim() === '');
                    clearTimeout(typingTimer);
                    connection.invoke("UserIsTyping", parseInt(activeRoomId)).catch(err => console.error(err));

                    typingTimer = setTimeout(() => {
                        connection.invoke("UserStoppedTyping", parseInt(activeRoomId)).catch(err => console.error(err));
                    }, 3000);
                });

                // Edit/Delete button handlers
                $(document).on('click', '.delete-btn', function() {
                    const messageItem = $(this).closest('.message-item');
                    const messageId = messageItem.data('message-id');
                    if (confirm('Are you sure you want to delete this message?')) {
                        connection.invoke("DeleteMessage", messageId).catch(err => console.error(err));
                    }
                });

                $(document).on('click', '.edit-btn', function() {
                    const messageItem = $(this).closest('.message-item');
                    editMessageId = messageItem.data('message-id');
                    const currentContent = messageItem.find('.message-content p').text();
                    $editMessageInput.val(currentContent);
                    $editModal.removeClass('hidden');
                });

                // Modal button handlers
                $('#save-edit-btn').on('click', function() {
                    const newContent = $editMessageInput.val();
                    if (editMessageId && newContent.trim() !== '') {
                        connection.invoke("EditMessage", editMessageId, newContent).catch(err => console.error(err));
                    }
                    $editModal.addClass('hidden');
                    editMessageId = null;
                });

                $('#cancel-edit-btn').on('click', () => {
                    $editModal.addClass('hidden');
                    editMessageId = null;
                });

                // --- Emoji Picker Logic ---
                $emojiButton.on('click', (e) => {
                    e.stopPropagation();
                    $emojiPicker.toggleClass('hidden');
                });

                $emojiPicker.on('emoji-click', event => {
                    const emoji = event.detail.unicode;
                    const input = $messageInput[0];
                    const start = input.selectionStart;
                    const end = input.selectionEnd;

                    const text = $messageInput.val();
                    $messageInput.val(text.substring(0, start) + emoji + text.substring(end));

                    input.selectionStart = input.selectionEnd = start + emoji.length;

                    $messageInput.trigger('input');
                    input.focus();
                });

                // Hide picker if clicked outside
                $(document).on('click', function (e) {
                    if ($emojiButton.length && $emojiPicker.length && !$emojiButton[0].contains(e.target) && !$emojiPicker[0].contains(e.target) && !$emojiPicker.hasClass('hidden')) {
                        $emojiPicker.addClass('hidden');
                    }
                });
            }

            // --- Start Connection ---
            async function start() {
                try {
                    await connection.start();
                    console.log("SignalR Connected.");
                    setupUI();
                } catch (err) {
                    console.log(err);
                    setTimeout(start, 5000);
                }
            };
            connection.onclose(start);
            start();
        });
    </script>
</body>
</html>

